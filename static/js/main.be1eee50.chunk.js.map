{"version":3,"sources":["Context/CovidTracker/CovidContext.js","Components/Table.js","Components/LineGraph.js","Components/Right.js","Components/Infobox.js","Components/util.js","Components/Stats.js","Components/Map1.js","Components/Header.js","Components/Left.js","App.js","Context/CovidTracker/CovidReducer.js","Context/CovidTracker/CovidState.js","index.js"],"names":["CovidContext","createContext","Table","tableData","useContext","className","map","country","cases","numeral","format","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","fetchData","console","log","length","datasets","backgroundColor","borderColor","backgroundGradientFromOpacity","backgroundGradientToOpacity","Right","Card","CardContent","Infobox","title","total","types","IsRed","covidContext","setCasesType","active","greenactive","onClick","e","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","pathOptions","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Stats","todayCases","todayRecovered","todayDeaths","Map","setmap","flyTo","zoom","whenCreated","scrollWheelZoom","TileLayer","url","attribution","Header","changeCountry","countries","FormControl","Select","variant","onChange","MenuItem","name","Left","App","InitialCountryInfo","getCountries","state","action","payload","GithubState","props","useReducer","CovidReducer","dispatch","sortData","sort","b","iso2","SortedData","event","countryCode","target","Provider","children","ReactDOM","render","StrictMode","CovidState","document","getElementById"],"mappings":"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","file":"static/js/main.be1eee50.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst CovidContext = createContext();\n\nexport default CovidContext;\n","import React, { useContext } from 'react';\nimport '../Css-Files/Table.css';\nimport numeral from 'numeral';\nimport CovidContext from '../Context/CovidTracker/CovidContext';\nfunction Table() {\n   const covidContext = useContext(CovidContext);\n   const { tableData } = covidContext;\n   return (\n      <div className=\"table\">\n         {tableData.map(({ country, cases }) => (\n            <tr>\n               <td>{country}</td>\n               <td>\n                  <strong>{numeral(cases).format('0,0')}</strong>\n               </td>\n            </tr>\n         ))}\n      </div>\n   );\n}\n\nexport default Table;\n","import React, { useState, useEffect, useContext } from 'react';\nimport CovidContext from '../Context/CovidTracker/CovidContext';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\nconst options = {\n   legend: {\n      display: false,\n   },\n   elements: {\n      point: {\n         radius: 0,\n      },\n   },\n   maintainAspectRatio: false,\n   tooltips: {\n      mode: 'index',\n      intersect: false,\n      callbacks: {\n         label: function (tooltipItem, data) {\n            return numeral(tooltipItem.value).format('+0,0');\n         },\n      },\n   },\n   scales: {\n      xAxes: [\n         {\n            type: 'time',\n            time: {\n               format: 'MM/DD/YY',\n               tooltipFormat: 'll',\n            },\n         },\n      ],\n      yAxes: [\n         {\n            gridLines: {\n               display: false,\n            },\n            ticks: {\n               // Include a dollar sign in the ticks\n               callback: function (value, index, values) {\n                  return numeral(value).format('0a');\n               },\n            },\n         },\n      ],\n   },\n};\n\nfunction LineGraph() {\n   const covidContext = useContext(CovidContext);\n   const { casesType } = covidContext;\n   const [data, setData] = useState({});\n\n   const buildChartData = (data) => {\n      let chartData = [];\n      let lastDataPoint;\n      for (let date in data[casesType]) {\n         if (lastDataPoint) {\n            let newDataPoint = {\n               x: date,\n               y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n         }\n         lastDataPoint = data[casesType][date];\n      }\n      return chartData;\n   };\n\n   useEffect(() => {\n      const fetchData = async () => {\n         await fetch(\n            'https://disease.sh/v3/covid-19/historical/all?lastdays=120'\n         )\n            .then((response) => {\n               return response.json();\n            })\n            .then((data) => {\n               setData(buildChartData(data));\n            });\n      };\n\n      fetchData();\n   }, [casesType]);\n   console.log(casesType);\n   return (\n      <div className=\"app_graph\">\n         {data?.length > 0 && (\n            <Line\n               options={options}\n               data={{\n                  datasets: [\n                     {\n                        backgroundColor: 'rgba(204, 16, 52, 0.5)',\n                        borderColor: '#CC1034',\n                        backgroundGradientFromOpacity: 0,\n                        backgroundGradientToOpacity: 0,\n                        data: data,\n                     },\n                  ],\n               }}\n            />\n         )}\n      </div>\n   );\n}\n\nexport default LineGraph;\n","import React, { useContext } from 'react';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport { Card, CardContent } from '@material-ui/core';\nimport CovidContext from '../Context/CovidTracker/CovidContext';\nfunction Right() {\n   const covidContext = useContext(CovidContext);\n   const { casesType } = covidContext;\n   return (\n      <Card className=\"app_right\">\n         <CardContent>\n            <h3 className=\"table_title\">Live cases by Country</h3>\n            <Table></Table>\n            <h3 className=\"app_graph_title\">{`Worldwide new ${casesType} `}</h3>\n            <LineGraph />\n         </CardContent>\n      </Card>\n   );\n}\n\nexport default Right;\n","import React, { useContext } from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport CovidContext from '../Context/CovidTracker/CovidContext';\nimport '../Css-Files/InfoBox.css';\n\nfunction Infobox({ title, cases, total, types, IsRed }) {\n   const covidContext = useContext(CovidContext);\n   const { setCasesType, casesType } = covidContext;\n   const active = types === casesType;\n   const greenactive = active && !IsRed;\n   return (\n      <Card\n         className={`InfoBox ${active && 'active'} ${\n            greenactive && 'active-green'\n         }`}\n         onClick={(e) => setCasesType(types)}\n      >\n         <CardContent>\n            <Typography color=\"textSecondary\" className=\"infobox_title\">\n               {title}\n            </Typography>\n\n            <h2 className={`infobox_cases ${!IsRed && 'green'}`}>{cases}</h2>\n\n            <Typography color=\"textSecondary\" className=\"infobox_total\">\n               {total} Total\n            </Typography>\n         </CardContent>\n      </Card>\n   );\n}\n\nexport default Infobox;\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\nconst casesTypeColors = {\n   cases: {\n      hex: '#cc1034',\n      multiplier: 180,\n   },\n   recovered: {\n      hex: '#42cf17',\n      multiplier: 200,\n   },\n   deaths: {\n      hex: '#fb4443',\n      multiplier: 1000,\n   },\n};\nexport const prettyPrintStat = (stat) =>\n   stat ? `+${numeral(stat).format('0.0a')}` : '+0';\n\nexport const showDataOnMap = (data, casesType) => {\n   return data.map((country) => (\n      <Circle\n         center={[country.countryInfo.lat, country.countryInfo.long]}\n         pathOptions={{\n            color: casesTypeColors[casesType].hex,\n            fillColor: casesTypeColors[casesType].hex,\n         }}\n         fillOpacity={0.4}\n         radius={\n            Math.sqrt(country[casesType]) *\n            casesTypeColors[casesType].multiplier\n         }\n      >\n         <Popup>\n            <div className=\"info-container\">\n               <div\n                  className=\"info-flag\"\n                  style={{\n                     backgroundImage: `url(${country.countryInfo.flag})`,\n                  }}\n               ></div>\n               <div className=\"info-name\">{country.country}</div>\n               <div className=\"info-confirmed\">\n                  Cases: {numeral(country.cases).format('0,0')}\n               </div>\n               <div className=\"info-recovered\">\n                  Recovered: {numeral(country.recovered).format('0,0')}\n               </div>\n               <div className=\"info-deaths\">\n                  Deaths: {numeral(country.deaths).format('0,0')}\n               </div>\n            </div>\n         </Popup>\n      </Circle>\n   ));\n};\n","import React, { useContext } from 'react';\nimport Infobox from './Infobox';\nimport CovidContext from '../Context/CovidTracker/CovidContext';\nimport { prettyPrintStat } from './util';\nfunction Stats() {\n   const covidContext = useContext(CovidContext);\n   const { countryInfo } = covidContext;\n   return (\n      <div className=\"app_stats\">\n         {/* Number of Today's and total cases */}\n         <Infobox\n            types=\"cases\"\n            IsRed={true}\n            title=\"Coronavirus Cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n         />\n\n         {/* Number of Today's recovered and total recovered */}\n         <Infobox\n            IsRed={false}\n            types=\"recovered\"\n            title=\"Recovered\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n         />\n\n         {/* Number of Today's death and total death cases */}\n         <Infobox\n            IsRed={true}\n            types=\"deaths\"\n            title=\"Death\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n         />\n      </div>\n   );\n}\n\nexport default Stats;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { MapContainer as LeafletMap, TileLayer } from 'react-leaflet';\nimport '../Css-Files/Map.css';\nimport { showDataOnMap } from './util';\nimport CovidContext from '../Context/CovidTracker/CovidContext';\n\nfunction Map() {\n   const covidContext = useContext(CovidContext);\n   const { center, tableData, casesType } = covidContext;\n\n   const [map, setmap] = useState(null);\n   if (map) {\n      map.flyTo(center);\n   }\n   return (\n      <div className=\"map\">\n         <LeafletMap\n            center={center}\n            zoom={3}\n            whenCreated={setmap}\n            scrollWheelZoom={false}\n         >\n            <TileLayer\n               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n               attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            {/* Loop through Countries and draw circles on the screen*/}\n            {showDataOnMap(tableData, casesType)}\n         </LeafletMap>\n      </div>\n   );\n}\n\nexport default Map;\n","import React, { useContext } from 'react';\nimport { FormControl, MenuItem, Select } from '@material-ui/core';\nimport CovidContext from '../Context/CovidTracker/CovidContext';\nfunction Header() {\n   const covidContext = useContext(CovidContext);\n   const { country, changeCountry, countries } = covidContext;\n\n   return (\n      <div className=\"app_header\">\n         <h1>Covid-19 Tracker</h1>\n\n         {/* Dropdown of all countries */}\n         <FormControl className=\"app_dropdown\">\n            {/* List of all countries */}\n            <Select variant=\"outlined\" value={country} onChange={changeCountry}>\n               {/* Loop through all the countries and show dropdown */}\n               <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n               {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n               ))}\n            </Select>\n         </FormControl>\n      </div>\n   );\n}\n\nexport default Header;\n","import React, { useContext, useEffect } from 'react';\nimport Stats from './Stats';\nimport Map from './Map1';\nimport Header from './Header';\n\nfunction Left() {\n   return (\n      <div className=\"app_left\">\n         <Header />\n         <Stats />\n         <Map />\n      </div>\n   );\n}\n\nexport default Left;\n","import React, { useContext, useEffect } from 'react';\nimport Right from './Components/Right.js';\nimport Left from './Components/Left.js';\nimport './Css-Files/App.css';\nimport CovidContext from './Context/CovidTracker/CovidContext.js';\nimport 'leaflet/dist/leaflet.css';\nfunction App() {\n   const covidContext = useContext(CovidContext);\n\n   useEffect(() => {\n      covidContext.InitialCountryInfo();\n      covidContext.getCountries();\n   }, []);\n\n   return (\n      <div className=\"app\">\n         <Left />\n         <Right />\n      </div>\n   );\n}\n\nexport default App;\n","export default (state, action) => {\n   switch (action.type) {\n      case 'SET_COUNTRY':\n         return {\n            ...state,\n            country: action.payload,\n         };\n      case 'SET_COUNTRY_INFO':\n         return {\n            ...state,\n            countryInfo: action.payload,\n         };\n      case 'SET_TABLE_DATA':\n         return {\n            ...state,\n            tableData: action.payload,\n         };\n      case 'SET_COUNTRIES':\n         return {\n            ...state,\n            countries: action.payload,\n         };\n      case 'SET_MAP_CENTER':\n         return {\n            ...state,\n            center: action.payload,\n         };\n      case 'SET_MAP_ZOOM':\n         return {\n            ...state,\n            zoom: 4,\n         };\n      case 'SET_CASE_TYPES':\n         return {\n            ...state,\n            casesType: action.payload,\n         };\n      default:\n         return state;\n   }\n};\n","import React, { useReducer } from 'react';\nimport CovidReducer from './CovidReducer';\nimport CovidContext from './CovidContext';\n\nconst GithubState = (props) => {\n   const initialState = {\n      countries: [],\n      country: 'worldwide',\n      countryInfo: {},\n      tableData: [],\n      casesType: 'cases',\n      center: [20.5937, 78.9629],\n   };\n\n   const [state, dispatch] = useReducer(CovidReducer, initialState);\n\n   // Initialising the Coutry to worldwide when App loads first time:\n   const InitialCountryInfo = async () => {\n      await fetch('https://disease.sh/v3/covid-19/all')\n         .then((response) => response.json())\n         .then((data) => {\n            dispatch({\n               type: 'SET_COUNTRY_INFO',\n               payload: data,\n            });\n         });\n   };\n\n   // Sorting the data on the number of cases for all countries\n   const sortData = (data) => {\n      const sortedData = [...data];\n\n      return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n   };\n\n   // Getting all the countries data from the api request:\n   const getCountries = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n         .then((response) => response.json())\n         .then((data) => {\n            const countries = data.map((country) => ({\n               name: country.country,\n               value: country.countryInfo.iso2,\n            }));\n\n            const SortedData = sortData(data);\n            dispatch({\n               type: 'SET_TABLE_DATA',\n               payload: SortedData,\n            });\n            dispatch({\n               type: 'SET_COUNTRIES',\n               payload: countries,\n            });\n         });\n   };\n\n   // Changing the country to the country clicked and also the info:\n   const changeCountry = async (event) => {\n      const countryCode = event.target.value;\n\n      const url =\n         countryCode === 'worldwide'\n            ? 'https://disease.sh/v3/covid-19/all'\n            : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n      await fetch(url)\n         .then((response) => response.json())\n         .then((data) => {\n            dispatch({\n               type: 'SET_COUNTRY',\n               payload: countryCode,\n            });\n            dispatch({\n               type: 'SET_COUNTRY_INFO',\n               payload: data,\n            });\n            if (countryCode === 'worldwide') {\n               dispatch({\n                  type: 'SET_MAP_CENTER',\n                  payload: [20.5937, 78.9629],\n               });\n            } else\n               dispatch({\n                  type: 'SET_MAP_CENTER',\n                  payload: [data.countryInfo.lat, data.countryInfo.long],\n               });\n         });\n   };\n\n   const setCasesType = (types) => {\n      dispatch({\n         type: 'SET_CASE_TYPES',\n         payload: types,\n      });\n   };\n\n   return (\n      <CovidContext.Provider\n         value={{\n            country: state.country,\n            countries: state.countries,\n            countryInfo: state.countryInfo,\n            tableData: state.tableData,\n            center: state.center,\n            casesType: state.casesType,\n            InitialCountryInfo,\n            getCountries,\n            changeCountry,\n            setCasesType,\n         }}\n      >\n         {props.children}\n      </CovidContext.Provider>\n   );\n};\nexport default GithubState;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CovidState from './Context/CovidTracker/CovidState';\nReactDOM.render(\n   <React.StrictMode>\n      <CovidState>\n         <App />\n      </CovidState>\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}